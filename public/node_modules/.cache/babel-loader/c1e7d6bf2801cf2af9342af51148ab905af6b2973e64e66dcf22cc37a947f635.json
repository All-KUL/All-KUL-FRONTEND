{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\so518\\\\course_registration\\\\src\\\\component\\\\Leftside\\\\GetTime.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GetTime() {\n  _s();\n  const [currentTime, setCurrentTime] = useState(new Date()); // 현재 시간\n\n  useEffect(() => {\n    // 1초마다 현재 시간 업데이트\n    const interval = setInterval(() => {\n      setCurrentTime(new Date()); // 현재 시간을 다시 가져와서 상태 업데이트\n    }, 1000);\n\n    // 컴포넌트가 언마운트될 때 interval을 정리\n    return () => clearInterval(interval);\n  }, []); // 빈 배열을 전달하여 한 번만 실행되도록 설정\n\n  // 현재 시간을 시간, 분, 초로 변환하는 함수\n  const formatTime = date => {\n    const hours = date.getHours().toString().padStart(2, '0'); // 시\n    const minutes = date.getMinutes().toString().padStart(2, '0'); // 분\n    const seconds = date.getSeconds().toString().padStart(2, '0'); // 초\n    return `${hours}:${minutes}:${seconds}`;\n  };\n  const formatDate = date => {\n    const year = date.getFullYear(); // 년도\n    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // 월\n    const day = date.getDate().toString().padStart(2, '0'); // 일\n    return `${year}-${month}-${day}`;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: \"black\",\n        marginLeft: \"5px\",\n        font\n      },\n      children: [formatDate(currentTime), \" \", formatTime(currentTime)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(GetTime, \"f3elDUct5ap4W3FuLtGG73aMsLc=\");\n_c = GetTime;\nvar _c;\n$RefreshReg$(_c, \"GetTime\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","GetTime","_s","currentTime","setCurrentTime","Date","interval","setInterval","clearInterval","formatTime","date","hours","getHours","toString","padStart","minutes","getMinutes","seconds","getSeconds","formatDate","year","getFullYear","month","getMonth","day","getDate","children","style","color","marginLeft","font","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/so518/course_registration/src/component/Leftside/GetTime.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nexport default function GetTime(){\r\n    const [currentTime, setCurrentTime] = useState(new Date()); // 현재 시간\r\n\r\n    useEffect(() => {\r\n      // 1초마다 현재 시간 업데이트\r\n      const interval = setInterval(() => {\r\n        setCurrentTime(new Date()); // 현재 시간을 다시 가져와서 상태 업데이트\r\n      }, 1000);\r\n  \r\n      // 컴포넌트가 언마운트될 때 interval을 정리\r\n      return () => clearInterval(interval);\r\n    }, []); // 빈 배열을 전달하여 한 번만 실행되도록 설정\r\n  \r\n    // 현재 시간을 시간, 분, 초로 변환하는 함수\r\n    const formatTime = (date) => {\r\n      const hours = date.getHours().toString().padStart(2, '0'); // 시\r\n      const minutes = date.getMinutes().toString().padStart(2, '0'); // 분\r\n      const seconds = date.getSeconds().toString().padStart(2, '0'); // 초\r\n      return `${hours}:${minutes}:${seconds}`;\r\n    };\r\n    const formatDate = (date) => {\r\n        const year = date.getFullYear(); // 년도\r\n        const month = (date.getMonth() + 1).toString().padStart(2, '0'); // 월\r\n        const day = date.getDate().toString().padStart(2, '0'); // 일\r\n        return `${year}-${month}-${day}`;\r\n      };\r\n    return (\r\n      <>\r\n        <span style={{\r\n            color:\"black\",\r\n            marginLeft:\"5px\",\r\n            font\r\n        }}>{formatDate(currentTime)} {formatTime(currentTime)}</span>\r\n      </>\r\n    );\r\n}"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACnD,eAAe,SAASC,OAAOA,CAAA,EAAE;EAAAC,EAAA;EAC7B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAIU,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE5DT,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCH,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMG,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMG,UAAU,GAAIC,IAAI,IAAK;IAC3B,MAAMC,KAAK,GAAGD,IAAI,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IAC3D,MAAMC,OAAO,GAAGL,IAAI,CAACM,UAAU,CAAC,CAAC,CAACH,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IAC/D,MAAMG,OAAO,GAAGP,IAAI,CAACQ,UAAU,CAAC,CAAC,CAACL,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IAC/D,OAAQ,GAAEH,KAAM,IAAGI,OAAQ,IAAGE,OAAQ,EAAC;EACzC,CAAC;EACD,MAAME,UAAU,GAAIT,IAAI,IAAK;IACzB,MAAMU,IAAI,GAAGV,IAAI,CAACW,WAAW,CAAC,CAAC,CAAC,CAAC;IACjC,MAAMC,KAAK,GAAG,CAACZ,IAAI,CAACa,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEV,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACjE,MAAMU,GAAG,GAAGd,IAAI,CAACe,OAAO,CAAC,CAAC,CAACZ,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACxD,OAAQ,GAAEM,IAAK,IAAGE,KAAM,IAAGE,GAAI,EAAC;EAClC,CAAC;EACH,oBACE1B,OAAA,CAAAE,SAAA;IAAA0B,QAAA,eACE5B,OAAA;MAAM6B,KAAK,EAAE;QACTC,KAAK,EAAC,OAAO;QACbC,UAAU,EAAC,KAAK;QAChBC;MACJ,CAAE;MAAAJ,QAAA,GAAEP,UAAU,CAAChB,WAAW,CAAC,EAAC,GAAC,EAACM,UAAU,CAACN,WAAW,CAAC;IAAA;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC,gBAC7D,CAAC;AAET;AAAChC,EAAA,CAnCuBD,OAAO;AAAAkC,EAAA,GAAPlC,OAAO;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}